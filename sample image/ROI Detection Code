import cv2
import numpy as np
import matplotlib.pyplot as plt
#%matplotlib inline
def angle_cos(p0, p1, p2):
    d1, d2 = (p0-p1).astype('float'), (p2-p1).astype('float')
    return abs( np.dot(d1, d2) / np.sqrt( np.dot(d1, d1)*np.dot(d2, d2) ) )

def find_squares(img):
    img = cv2.GaussianBlur(img, (5, 5), 0)
    squares = []
    cent=set()
    height=[]
    o=0
    i=0
    for gray in cv2.split(img):
        for thrs in range(0, 255, 26):
            if thrs == 0:
                bin = cv2.Canny(gray, 0, 50, apertureSize=5)
                bin = cv2.dilate(bin, None)
            else:
                _retval, bin = cv2.threshold(gray, thrs, 255, cv2.THRESH_BINARY)
            contours, _hierarchy = cv2.findContours(bin, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
            #image_number=0
            #mask = np.zeros(bin.shape, dtype=np.uint8)

            
            for cnt in contours:
                cnt_len = cv2.arcLength(cnt, True)
                cnt = cv2.approxPolyDP(cnt, 0.02*cnt_len, True)
                x,y,w,h = cv2.boundingRect(cnt) 
                       
                       
                center = (x,y,w,h)
                
                if len(cnt) == 4 and cv2.contourArea(cnt) > 1000 and cv2.isContourConvex(cnt):
                    cnt = cnt.reshape(-1, 2)
                    max_cos = np.max([angle_cos( cnt[i], cnt[(i+1) % 4], cnt[(i+2) % 4] ) for i in range(4)])
                    #print(cnt)
                    a = (cnt[1][1] - cnt[0][1])
                   
                    if max_cos < 0.1 and a < img.shape[0]*0.8:
                     if(h<150):
                      #print(h)
                      #print(center)
                      cent.add(center)
                      
                      #roi=img[y:y+h,x:x+w]
                      #x,y,w,h=cv2.boundingRect(cnt)
                      #print(y+h,x+w)
                       
                    #print (center)            
                     
                      #cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255,0), 2)
                      
                       #cv2.drawContours(mask,contours,cnt,(255, 255, 255),-1) 
                      
                       #r = float(cv2.countNonZero(mask[y:y+h, x:x+w])) / (w * h)
                         
                      
                       
                      
                      squares.append(cnt)
            #hash(tuple(squares))           
            #sq=set(squares)           

            #print(o,squares[o])
            #o=o+1    
              
            #print(roi)  
            '''for l in range(len(contours)):
              x,y,w,h=cv2.boundingRect(contours[l])
              mask[y:y+h,x:x+h]=0
              print("box{0}:({1},{2}),({3},{4}),({5},{6}),({7},{8})".format(l,x,y,x+w,y,x+w,y+h,x,y+h)    )  '''
             
    return squares,cent
from google.colab.patches import cv2_imshow
dice = cv2.imread('slides.jpg')
path=r"slides.jpg"
im=cv2.imread(path)
squares,cent = find_squares(dice)

cv2.drawContours(dice, squares, -1, (0, 255, 0), 3)
p=0
for k in cent:
                      print(k)
                      x,y,w,h=k
                      p=cv2.rectangle(im,(cent),(255,0,0),2)
                      #cv2_imshow(p)
                      

#imj=cv2.fillConvexPoly(im, ex,  (0,0,0))
 
                      crop=im[y:y+h,x:x+w].copy()
                     #print(i,squares[i],c)
                      cv2_imshow(crop)
                      cv2.imwrite("cover1.png",crop)
                      
#x,y,w,h = cv2.boundingRect(squares) 
#center = (x,y,w,h)

#ima = np.zeros(im.shape[:-1]).dtype=np.uint8
mask = np.zeros((4, 3))
#print ("box1",img[u])
#import numpy as np
ex=np.array([138, 132, 75, 89],'int64')


#ima = np.zeros(im.shape[:-1]).dtype=np.uint8

#mask = np.zeros((4, 3))
#imj=cv2.fillConvexPoly(im, ex,  (0,0,0))
#c=cv2.boundingRect(ex)
#x,y,w,h=c
#crop=im[y:y+h,x:x+w].copy()
#cv2_imshow(crop)
'''for i in range(1,117):
 ex=np.array([squares[i]],'int32')


#imj=cv2.fillConvexPoly(im, ex,  (0,0,0))
 c=cv2.boundingRect(ex)
 x,y,w,h=c
 crop=im[y:y+h,x:x+w].copy()
 print(i,squares[i],c)
 cv2_imshow(crop)
cv2.imwrite("cover1.png",crop)'''
plt.imshow(dice)
#cv2.imwrite("roicover1.png",dice)
#cv2_imshow(imj)
